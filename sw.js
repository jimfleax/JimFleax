const CACHE_NAME="jimfleax-cache-v1",CACHE_EXPIRATION=12096e5,FILES_TO_CACHE=["/","/index.html","/js/main.js","/css/styles.css","css/JetBrains_Mono/JetBrainsMono-Italic-VariableFont_wght.ttf","css/JetBrains_Mono/JetBrainsMono-VariableFont_wght.ttf","css/Montserrat/Montserrat-Italic-VariableFont_wght.ttf","css/Montserrat/Montserrat-VariableFont_wght.ttf","css/Settikef.otf","/icons/16.png","/icons/32.png","/icons/72.png","/icons/96.png","/icons/128.png","/icons/192.png","/icons/512.png","/media/me.png","/manifest.json"];self.addEventListener("install",e=>{e.waitUntil(caches.open(CACHE_NAME).then(async c=>{try{await c.addAll(FILES_TO_CACHE);const t=Date.now(),a={};FILES_TO_CACHE.forEach(e=>a[e]=t),await c.put("cache-metadata",new Response(JSON.stringify(a))),self.skipWaiting()}catch(e){console.error("Cache install failed:",e)}}))});self.addEventListener("fetch",e=>{e.respondWith(fetch(e.request).then(async t=>{if(!t||200!==t.status||"basic"!==t.type)throw new Error("Bad response, fallback to cache");const c = await caches.open(CACHE_NAME);const a = await getCacheMetadata(c);return await (a[e.request.url] = Date.now(), await c.put(e.request, t.clone()), await c.put("cache-metadata", new Response(JSON.stringify(a))), t);}).catch(async()=>{const t=await caches.open(CACHE_NAME),a=await getCacheMetadata(t),c=await t.match(e.request);if(c){if(Date.now()- (a[e.request.url]||0)>CACHE_EXPIRATION)return console.log("Cache expired:",e.request.url),await t.delete(e.request),fetch(e.request);return c}return Promise.reject("No cache available")}))});async function getCacheMetadata(e){const t=await e.match("cache-metadata");return t?t.json():{}}self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>e!==CACHE_NAME&&caches.delete(e))))),self.clients.claim()});